import {useLexicalComposerContext} from '@lexical/react/LexicalComposerContext';
import {useLexicalEditable} from '@lexical/react/useLexicalEditable';
import {
    $getTableAndElementByKey,
    $getTableColumnIndexFromTableCellNode,
    $getTableRowIndexFromTableCellNode,
    $insertTableColumn__EXPERIMENTAL,
    $insertTableRow__EXPERIMENTAL,
    $isTableCellNode,
    $isTableNode,
    getTableElement,
    TableCellNode,
    TableNode,
    TableRowNode,
} from '@lexical/table';
import {$findMatchingParent, mergeRegister} from '@lexical/utils';
import {
    $getNearestNodeFromDOMNode,
    EditorThemeClasses,
    isHTMLElement,
    NodeKey,
} from 'lexical';
import {useEffect, useMemo, useRef, useState} from 'react';
import * as React from 'react';
import {createPortal} from 'react-dom';
import debounce from 'lodash.debounce';


const BUTTON_WIDTH_PX = 20;


function getThemeSelector(getTheme, name) {
    const className = getTheme()?.[name];
    if (typeof className !== 'string') {
        throw new Error(`getThemeClass: required theme property ${String(name)} not defined`);
    }
    return className
        .split(/\s+/g)
        .map((cls) => `.${cls}`)
        .join('');
}


function useDebounce(fn, ms, maxWait) {
    const funcRef = useRef(null);
    funcRef.current = fn;

    return useMemo(
        () =>
            debounce(
                (...args) => {
                    if (funcRef.current) {
                        funcRef.current(...args);
                    }
                },
                ms,
                {maxWait}
            ),
        [ms, maxWait]
    );
}


function TableHoverActionsContainer({anchorElem}) {
    const [editor, {getTheme}] = useLexicalComposerContext();
    const isEditable = useLexicalEditable();
    const [isShownRow, setShownRow] = useState(false);
    const [isShownColumn, setShownColumn] = useState(false);
    const [shouldListenMouseMove, setShouldListenMouseMove] = useState(false);
    const [position, setPosition] = useState({});
    const tableSetRef = useRef(new Set());
    const tableCellDOMNodeRef = useRef(null);

    const debouncedOnMouseMove = useDebounce(
        (event) => {
            if (!editor) return;

            const {isOutside, tableDOMNode} = getMouseInfo(event, getTheme);

            if (isOutside) {
                setShownRow(false);
                setShownColumn(false);
                return;
            }

            if (!tableDOMNode) {
                return;
            }

            tableCellDOMNodeRef.current = tableDOMNode;

            let hoveredRowNode = null;
            let hoveredColumnNode = null;
            let tableDOMElement = null;


            editor.read(() => {
                const maybeTableCell = $getNearestNodeFromDOMNode(tableDOMNode);

                if (!maybeTableCell || !$isTableCellNode(maybeTableCell)) {
                    return;
                }

                const table = $findMatchingParent(maybeTableCell, (node) =>
                    $isTableNode(node)
                );

                if (!table || !$isTableNode(table)) {
                    return;
                }

                tableDOMElement = getTableElement(
                    table,
                    editor.getElementByKey(table.getKey())
                );

                if (tableDOMElement) {
                    const rowCount = table.getChildrenSize();
                    const firstRow = table.getChildAtIndex(0);
                    const colCount = firstRow ? firstRow.getChildrenSize() : 0;

                    const rowIndex = $getTableRowIndexFromTableCellNode(maybeTableCell);
                    const colIndex = $getTableColumnIndexFromTableCellNode(maybeTableCell);

                    if (rowIndex === rowCount - 1) {
                        hoveredRowNode = maybeTableCell;
                    } else if (colIndex === colCount - 1) {
                        hoveredColumnNode = maybeTableCell;
                    }
                }
            });


            if (tableDOMElement) {
                const {
                    width: tableElemWidth,
                    y: tableElemY,
                    right: tableElemRight,
                    left: tableElemLeft,
                    bottom: tableElemBottom,
                    height: tableElemHeight,
                } = tableDOMElement.getBoundingClientRect();

                const parentElement = tableDOMElement.parentElement;
                let tableHasScroll = false;

                if (
                    parentElement &&
                    parentElement.classList.contains(
                        "PlaygroundEditorTheme__tableScrollableWrapper"
                    )
                ) {
                    tableHasScroll = parentElement.scrollWidth > parentElement.clientWidth;
                }

                if (!anchorElem) return;

                const {y: editorElemY, left: editorElemLeft} =
                    anchorElem.getBoundingClientRect();

                if (hoveredRowNode) {
                    setShownColumn(false);
                    setShownRow(true);
                    setPosition({
                        height: BUTTON_WIDTH_PX,
                        left:
                            tableHasScroll && parentElement
                                ? parentElement.offsetLeft
                                : tableElemLeft - editorElemLeft,
                        top: tableElemBottom - editorElemY + 5,
                        width:
                            tableHasScroll && parentElement
                                ? parentElement.offsetWidth
                                : tableElemWidth,
                    });
                } else if (hoveredColumnNode) {
                    setShownColumn(true);
                    setShownRow(false);
                    setPosition({
                        height: tableElemHeight,
                        left: tableElemRight - editorElemLeft + 5,
                        top: tableElemY - editorElemY,
                        width: BUTTON_WIDTH_PX,
                    });
                }
            }
        },
        50,
        250
    );


    const tableResizeObserver = useMemo(() => {
        return new ResizeObserver(() => {
            setShownRow(false);
            setShownColumn(false);
        });
    }, []);

    useEffect(() => {
        if (!shouldListenMouseMove) {
            return;
        }

        document.addEventListener('mousemove', debouncedOnMouseMove);

        return () => {
            setShownRow(false);
            setShownColumn(false);
            debouncedOnMouseMove.cancel();
            document.removeEventListener('mousemove', debouncedOnMouseMove);
        };
    }, [shouldListenMouseMove, debouncedOnMouseMove]);

    console.log("helloasdasd asd asd")

    useEffect(() => {
        if (!editor || !tableResizeObserver) return;

        console.log(editor);

        return mergeRegister(
            editor.registerMutationListener(
                TableNode,
                (mutations) => {
                    editor.update(() => { // âœ… Wrap inside update()
                        let resetObserver = false;
                        for (const [key, type] of mutations) {
                            switch (type) {
                                case 'created': {
                                    tableSetRef.current.add(key);
                                    resetObserver = true;
                                    break;
                                }
                                case 'destroyed': {
                                    tableSetRef.current.delete(key);
                                    resetObserver = true;
                                    break;
                                }
                                default:
                                    break;
                            }
                        }
                        if (resetObserver) {
                            tableResizeObserver.disconnect();
                            for (const tableKey of tableSetRef.current) {
                                const {tableElement} = $getTableAndElementByKey(tableKey);
                                tableResizeObserver.observe(tableElement);
                            }
                            setShouldListenMouseMove(tableSetRef.current.size > 0);
                        }
                    });
                },
                {skipInitialization: false}
            )
        );
    }, [editor, tableResizeObserver]);


    const insertAction = (insertRow) => {
        if (!editor) return;


        editor.update(() => {
            if (tableCellDOMNodeRef.current) {
                const maybeTableNode = $getNearestNodeFromDOMNode(
                    tableCellDOMNodeRef.current
                );
                maybeTableNode?.selectEnd();
                if (insertRow) {
                    $insertTableRow__EXPERIMENTAL();
                    setShownRow(false);
                } else {
                    $insertTableColumn__EXPERIMENTAL();
                    setShownColumn(false);
                }
            }
        });
    };

    if (!isEditable) {
        return null;
    }


    return (
        <>
            {isShownRow && (
                <button
                    className={`${getTheme()?.tableAddRows}`}
                    style={{...position}}
                    onClick={() => insertAction(true)}
                />
            )}
            {isShownColumn && (
                <button
                    className={`${getTheme()?.tableAddColumns}`}
                    style={{...position}}
                    onClick={() => insertAction(false)}
                />
            )}
        </>
    );
}

function getMouseInfo(event, getTheme) {
    const target = event.target;
    const tableCellClass = getThemeSelector(getTheme, 'tableCell');


    if (isHTMLElement(target)) {
        const tableDOMNode = target.closest(
            `td${tableCellClass}, th${tableCellClass}`
        );

        const isOutside = !(
            tableDOMNode ||
            target.closest(`button${getThemeSelector(getTheme, 'tableAddRows')}`) ||
            target.closest(`button${getThemeSelector(getTheme, 'tableAddColumns')}`) ||
            target.closest('div.TableCellResizer__resizer')
        );

        return {isOutside, tableDOMNode};
    } else {
        return {isOutside: true, tableDOMNode: null};
    }
}

export default function TableHoverActionsPlugin({anchorElem = document.body}) {
    const isEditable = useLexicalEditable();

    return isEditable
        ? createPortal(
            <TableHoverActionsContainer anchorElem={anchorElem}/>,
            anchorElem
        )
        : null;
}
